// Code generated by mockery v2.42.3. DO NOT EDIT.

package schedule_repository_contract

import (
	context "context"

	entities "github.com/jfelipearaujo-healthmed/scheduler-service/internal/core/domain/entities"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, schedule
func (_m *MockRepository) Create(ctx context.Context, schedule *entities.Schedule) (*entities.Schedule, error) {
	ret := _m.Called(ctx, schedule)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entities.Schedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Schedule) (*entities.Schedule, error)); ok {
		return rf(ctx, schedule)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Schedule) *entities.Schedule); ok {
		r0 = rf(ctx, schedule)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Schedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.Schedule) error); ok {
		r1 = rf(ctx, schedule)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, doctorID, scheduleID
func (_m *MockRepository) Delete(ctx context.Context, doctorID uint, scheduleID uint) error {
	ret := _m.Called(ctx, doctorID, scheduleID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) error); ok {
		r0 = rf(ctx, doctorID, scheduleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByDoctorIDAndDateTimeAvailable provides a mock function with given fields: ctx, doctorID, dateTimeAvailable
func (_m *MockRepository) GetByDoctorIDAndDateTimeAvailable(ctx context.Context, doctorID uint, dateTimeAvailable time.Time) (*entities.Schedule, error) {
	ret := _m.Called(ctx, doctorID, dateTimeAvailable)

	if len(ret) == 0 {
		panic("no return value specified for GetByDoctorIDAndDateTimeAvailable")
	}

	var r0 *entities.Schedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, time.Time) (*entities.Schedule, error)); ok {
		return rf(ctx, doctorID, dateTimeAvailable)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, time.Time) *entities.Schedule); ok {
		r0 = rf(ctx, doctorID, dateTimeAvailable)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Schedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, time.Time) error); ok {
		r1 = rf(ctx, doctorID, dateTimeAvailable)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, doctorID, scheduleID
func (_m *MockRepository) GetByID(ctx context.Context, doctorID uint, scheduleID uint) (*entities.Schedule, error) {
	ret := _m.Called(ctx, doctorID, scheduleID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entities.Schedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) (*entities.Schedule, error)); ok {
		return rf(ctx, doctorID, scheduleID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) *entities.Schedule); ok {
		r0 = rf(ctx, doctorID, scheduleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Schedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, uint) error); ok {
		r1 = rf(ctx, doctorID, scheduleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, filter
func (_m *MockRepository) List(ctx context.Context, filter *ListFilter) ([]entities.Schedule, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []entities.Schedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ListFilter) ([]entities.Schedule, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ListFilter) []entities.Schedule); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Schedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ListFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, doctorID, schedule
func (_m *MockRepository) Update(ctx context.Context, doctorID uint, schedule *entities.Schedule) (*entities.Schedule, error) {
	ret := _m.Called(ctx, doctorID, schedule)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *entities.Schedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, *entities.Schedule) (*entities.Schedule, error)); ok {
		return rf(ctx, doctorID, schedule)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, *entities.Schedule) *entities.Schedule); ok {
		r0 = rf(ctx, doctorID, schedule)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Schedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, *entities.Schedule) error); ok {
		r1 = rf(ctx, doctorID, schedule)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
